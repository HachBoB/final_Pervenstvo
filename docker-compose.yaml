# version: "3.8"

services:
  rabbitmq:
    image: "rabbitmq:4-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - work
  redis:
    image: redis:7.0-alpine  # Используем легковесную версию Redis
    container_name: redis
    ports:
      - "6379:6379"          # Пробрасываем порт для доступа к Redis
    volumes:
      - redis_data:/data     # Сохраняем данные Redis в volume
    command: [ "redis-server", "--appendonly", "yes" ]

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './ssl:/etc/nginx/ssl'
      - './nginx.conf:/etc/nginx/nginx.conf'
    environment:
      - ENABLE_IPV6=false
    depends_on:
      - account
    #      - frontend
    networks:
      - work

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./dumps/:/docker-entrypoint-initdb.d/
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: postgres
    networks:
      - work

  account:
    build:
      context: ./backend/account/
    container_name: account
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - rabbitmq
    #      - redis
    env_file:
      - ./backend/account/.env
    networks:
      - work

  events:
    build:
      context: ./backend/events/
    container_name: events
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - rabbitmq
    #      - redis
    env_file:
      - ./backend/events/.env
    networks:
      - work

  notification:
    build:
      context: ./backend/notification/
    container_name: notification
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - rabbitmq
    #      - redis
    env_file:
      - ./backend/notification/.env
    networks:
      - work

  frontend:
    build:
      context: ./frontend/
    container_name: frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    networks:
      - work

networks:
  work:

volumes:
  postgres_data:
  redis_data: